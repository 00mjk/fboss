// Copyright 2004-present Facebook. All Rights Reserved.

#include "fboss/agent/hw/bcm/BcmWarmBootState.h"

#include "fboss/agent/Constants.h"
#include "fboss/agent/hw/bcm/BcmHost.h"
#include "fboss/agent/hw/bcm/BcmSwitch.h"

namespace facebook {
namespace fboss {

folly::dynamic BcmWarmBootState::hostTableToFollyDynamic() const {
  folly::dynamic hostsJson = folly::dynamic::array;
  for (const auto& hostTableEntry : *hw_->getHostTable()) {
    auto host = hostTableEntry.second.lock();
    hostsJson.push_back(host->toFollyDynamic());
  }

  // previously, ECMP next hops were maintained as a part of BcmHostTable, even
  // though, they did not really go in BCM ASIC's host table. this was reflected
  // in warmboot state file generated by FBOSS for BCMSwitch. Retaining backward
  // compatibility, by doing "multi-Path nexthop" toFollyDynamic here.
  folly::dynamic ecmpHostsJson = folly::dynamic::array;
  auto& ecmpHosts = hw_->getMultiPathNextHopTable()->getNextHops();
  for (const auto& vrfNhopsAndHost : ecmpHosts) {
    auto weakPtr = vrfNhopsAndHost.second;
    auto ecmpHost = weakPtr.lock();
    ecmpHostsJson.push_back(ecmpHost->toFollyDynamic());
  }

  folly::dynamic hostTable = folly::dynamic::object;
  hostTable[kHosts] = std::move(hostsJson);
  hostTable[kEcmpHosts] = std::move(ecmpHostsJson);
  return hostTable;
}

} // namespace fboss
} // namespace facebook
